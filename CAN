https://www.udemy.com/course/microcontroller-programming-stm32-timers-pwm-can-bus-protocol/learn/lecture/11896142#overview

General:
- broadcast type: every device can "hear" signal
- retransmit available
- hot pluggable
- 2 MBit/s
- Node: CAN_Tx & CAN_Rx (not used to communicate to other node == Digital Signals) => better use differential Signals (CAN transceiver)
- Digital Signals => transceiver => Differential Signals (CANHigh & CANLow)
- Node Controller + Transceiver
- +- 5 V => noice cancelling == detecting potential deifference (+- 10V)
- dominant: logic 0(CANHigh - CANLow = ~2V); recessive: logic 1 (CANHigh - CANLow = 0V)

CAN frame formats:
- Data: CAN node message [StartFrame] -> [ArbitrationID==PriorityOfMessage] -> [DataLengthCode] -> [Data==8bytes==payload] -> [CRC] -> [ACK] -> [ACK Delimiter] ->[EndOfFrame] 
- Remote
- Error 
- Overload

Standard vs Extended CNA:
- 11 vs 19 identifiers

RTR (remote transmition request) bit:
- 0 == data frame
- 1 == remote == request for data from other node == no data field

DLC (data length code)
- number of bytes being transmitted

CRC:
- used for the error detection at the receiving end

Arbitration:
- dominant vs recessive

Can timing:
- CLK == 25 MHz, CAN prescaler == 1, duration of 1 time quanta ==  prescaler / CLK
http://www.bittiming.can-wiki.info/

Can should be moved to the working mode == normal or something like that == HAL_Can_Start()

Arbitration:
- lower the ID -> higher the priority == dominant bit rules
